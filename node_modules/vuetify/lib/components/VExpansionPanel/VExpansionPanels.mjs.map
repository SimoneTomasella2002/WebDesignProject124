{"version":3,"file":"VExpansionPanels.mjs","names":["makeVExpansionPanelProps","provideDefaults","makeGroupProps","useGroup","makeThemeProps","provideTheme","computed","toRef","genericComponent","propsFactory","useRender","VExpansionPanelSymbol","Symbol","for","allowedVariants","makeVExpansionPanelsProps","flat","Boolean","variant","type","String","default","validator","v","includes","VExpansionPanels","name","props","emits","val","setup","_ref","slots","next","prev","themeClasses","variantClass","VExpansionPanel","bgColor","collapseIcon","color","eager","elevation","expandIcon","focusable","hideActions","readonly","ripple","rounded","static","_createVNode","tag","tile","value","class","style"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanels.tsx"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { makeVExpansionPanelProps } from './VExpansionPanel'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport type VExpansionPanelSlot = {\n  prev: () => void\n  next: () => void\n}\n\nexport type VExpansionPanelSlots = {\n  default: VExpansionPanelSlot\n}\n\nexport const makeVExpansionPanelsProps = propsFactory({\n  flat: Boolean,\n\n  ...makeGroupProps(),\n  ...makeVExpansionPanelProps(),\n  ...makeThemeProps(),\n\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'default',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'VExpansionPanels')\n\nexport const VExpansionPanels = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanels',\n\n  props: makeVExpansionPanelsProps(),\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const { next, prev } = useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        bgColor: toRef(props, 'bgColor'),\n        collapseIcon: toRef(props, 'collapseIcon'),\n        color: toRef(props, 'color'),\n        eager: toRef(props, 'eager'),\n        elevation: toRef(props, 'elevation'),\n        expandIcon: toRef(props, 'expandIcon'),\n        focusable: toRef(props, 'focusable'),\n        hideActions: toRef(props, 'hideActions'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        rounded: toRef(props, 'rounded'),\n        static: toRef(props, 'static'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          {\n            'v-expansion-panels--flat': props.flat,\n            'v-expansion-panels--tile': props.tile,\n          },\n          themeClasses.value,\n          variantClass.value,\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.({ prev, next }) }\n      </props.tag>\n    ))\n\n    return {\n      next,\n      prev,\n    }\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n"],"mappings":"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","ignoreList":[]}